//
//  STACK OVERFLOW
//  BUTTONS
//
//  This CSS comes from Stacks, our CSS & Pattern library for rapidly building
//  Stack Overflow. For documentation of all these classes and how to contribute,
//  visit https://stackoverflow.design/
//
//  TABLE OF CONTENTS
//  • BASE STYLE
//  • STYLE MODIFICATIONS
//  • LAYOUTS & SIZES
//
//  ============================================================================
//  $   STYLE MIXINS
//      Within each community theme, we allow buttons styles to be modified.
//      The attributes that we allow people to modify are:
//
//      Attribute                 Variable                Default
//      ---                       ---                     ---
//      Font Weight               @btn-fw                 400
//      Font Color                @btn-fc                 @link-color
//      Background Color          @btn-bgc                fade(@btn-fc,0%)
//      Background Image          @btn-bgg                false
//      Border Color              @btn-brc                false
//      Border Radius             @btn-br                 @br-sm
//      Box Shadow Inset Color    @btn-bxis               false
//      Box Shadow Color          @btn-bxos               @blue-500;
//
//      Some of these properties are true or false statements. To provide the
//      fullest flexibility, we've created a number of mixins which check
//      if different attributes are present.
//
//      MIXIN:
//      Box Shadow Inset Color
//
//      HOW IT WORKS:
//      What happens is when the mixin is invoked, we do a quick check to see
//      if we're allowing inset borders within buttons (@btn-bxis). This is a
//      true/false statement. If TRUE, we add in the variable you pass into
//      the mixin (@bxis). If @btn-bxis is FALSE, add only the outer box shadow.
//  ----------------------------------------------------------------------------

& { // create a single scope to load the config into, at least for now
#stacks-internals #short-config();

.btn-check-bxs(@bxis: transparent, @bxos: @btn-bxos, @status: @btn-bxis) {
    & when (@status = true) {
        -webkit-box-shadow: inset 0 1px 0 0 fade(lighten(@bxis,20%),75%), 0 0 0 0 fade(@bxos,0%);
                box-shadow: inset 0 1px 0 0 fade(lighten(@bxis,20%),75%), 0 0 0 0 fade(@bxos,0%);

        &:hover {
            -webkit-box-shadow: inset 0 1px 0 0 fade(lighten(@bxis,20%),50%), 0 0 0 0 fade(@bxos,0%);
                    box-shadow: inset 0 1px 0 0 fade(lighten(@bxis,20%),50%), 0 0 0 0 fade(@bxos,0%);
        }
        &:focus {
            -webkit-box-shadow: inset 0 1px 0 0 fade(lighten(@bxis,20%),50%), 0 0 0 @su4 fade(@bxos,15%);
                    box-shadow: inset 0 1px 0 0 fade(lighten(@bxis,20%),50%), 0 0 0 @su4 fade(@bxos,15%);
        }
        &:active {
            -webkit-box-shadow: inset 0 @su2 @su8 0 fade(darken(@bxis,20%),80%);
                    box-shadow: inset 0 @su2 @su8 0 fade(darken(@bxis,20%),80%);
        }
        &.is-selected {
            -webkit-box-shadow: inset 0 @su2 @su8 0 fade(darken(@bxis,25%),90%);
                    box-shadow: inset 0 @su2 @su8 0 fade(darken(@bxis,25%),90%);
        }
    }

    & when (@status = false) {
        -webkit-box-shadow: 0 0 0 0 fade(@bxos,0%);
                box-shadow: 0 0 0 0 fade(@bxos,0%);

        &:hover {
            -webkit-box-shadow: 0 0 0 0 fade(@bxos,0%);
                    box-shadow: 0 0 0 0 fade(@bxos,0%);
        }
        &:focus {
            -webkit-box-shadow: 0 0 0 1px fade(@white,50%), 0 0 0 @su4 fade(@bxos,10%);
                    box-shadow: 0 0 0 1px fade(@white,50%), 0 0 0 @su4 fade(@bxos,10%);
        }
    }

    &[disabled] {
        -webkit-box-shadow: none;
                box-shadow: none;
    }
}

//      MIXIN:
//      Border Color
//
//      HOW IT WORKS:
//      We first check to see if borders are desired on buttons with @btn-brc.
//      If it's true, then we use the background color by darkening it.
//  ----------------------------------------------------------------------------
.btn-check-brc(@brc: @btn-bgc, @status: @btn-brc) when (@status = true) {
    border-color: darken(@brc,10%);

    &:hover {
        border-color: darken(@brc,10%);
    }
    &:active {
        border-color: darken(@brc,20%);
    }
    &.is-selected {
        border-color: darken(@brc,30%);
    }
    &[disabled] {
        border-color: fade(desaturate(@brc,75%),10%);
    }
}

//      MIXIN:
//      Background Image (Gradient)
//
//      HOW IT WORKS:
//      Using a mixin guard we check to see if @btn-bgg is TRUE/FALSE, or if
//      the background value being passed is transparent. If @btn-bgg is TRUE
//      and if the @bgc value IS NOT transparent, then add the background
//      gradient to the button.
//
//      In any other scenario, reset the background-image to none.
//  ----------------------------------------------------------------------------
.btn-check-bgg(@bgc) {
    //    If @btn-bgg: true; and @bgc is NOT transparent, show gradients.
    & when not (@bgc = transparent) and (@btn-bgg = true) {
        background-image: -webkit-gradient(linear, left top, left bottom, from(lighten(@bgc,10%)), to(spin(saturate(@bgc,10%),5)));
        background-image: linear-gradient(to bottom, lighten(@bgc,10%) 0%, spin(saturate(@bgc,10%),5) 100%);

        &:hover {
            background-image: -webkit-gradient(linear, left top, left bottom, from(spin(saturate(lighten(@bgc,10%),5%),5)), to(spin(saturate(@bgc,15%),10)));
            background-image: linear-gradient(to bottom, spin(saturate(lighten(@bgc,10%),5%),5) 0%, spin(saturate(@bgc,15%),10) 100%);
        }
        &:focus {
            background-image: -webkit-gradient(linear, left top, left bottom, from(spin(saturate(lighten(@bgc,10%),10%),10)), to(spin(saturate(@bgc,20%),15)));
            background-image: linear-gradient(to bottom, spin(saturate(lighten(@bgc,10%),10%),10) 0%, spin(saturate(@bgc,20%),15) 100%);
        }
        &.is-selected {
            background-image: -webkit-gradient(linear, left top, left bottom, from(spin(saturate(lighten(@bgc,10%),15%),15)), to(spin(saturate(@bgc,25%),20)));
            background-image: linear-gradient(to bottom, spin(saturate(lighten(@bgc,10%),15%),15) 0%, spin(saturate(@bgc,25%),20) 100%);
        }
        &[disabled] {
            background-image: -webkit-gradient(linear, left top, left bottom, from(fade(desaturate(lighten(@bgc,10%),75%),50%)), to(fade(desaturate(@bgc,75%),50%)));
            background-image: linear-gradient(to bottom, fade(desaturate(lighten(@bgc,10%),75%),50%) 0%, fade(desaturate(@bgc,75%),50%) 100%);
        }
    }

    //    If @btn-bgg: false; or if @bgc is transparent, then remove gradients.
    & when (@bgc = transparent), (@btn-bgg = false) {
        &,
        &:hover,
        &:focus,
        &.is-selected,
        &[disabled] {
            background-image: none;
        }
    }
}

//      MIXIN:
//      Background Color
//
//      HOW IT WORKS:
//      Using a mixin guard we check to see what the alpha level is. If the
//      level equals 0, we slightly fade in the background color on hover and
//      focus. If the alpha level is greater than 0, then we darken the
//      background color.
//  ----------------------------------------------------------------------------
.btn-bgc(@bgc) {
    //  TEMPORARY -- PAST CSS REQUIRES US TO STATE FOCUS STATE.
    //               This isn't needed otherwise.
    &,
    &:focus {
        background-color: @bgc;
    }

    & when (alpha(@bgc) = 0) {
        &:hover {
            background-color: fade(saturate(@bgc,5%),5%);
        }
        &:active {
            background-color: fade(saturate(@bgc,15%),15%);
        }
        &.is-selected {
            background-color: fade(saturate(@bgc,20%),25%);
        }
        &[disabled] {
            background-color: fade(desaturate(@bgc,90%),20%);
        }
    }

    & when (alpha(@bgc) > 0) {
        &:hover {
            background-color: darken(@bgc,7.5%);
        }
        &:active {
            background-color: darken(@bgc,15%);
        }
        &.is-selected {
            background-color: darken(@bgc,20%);
        }
        &[disabled] {
            background-color: fade(desaturate(@bgc,75%),50%);
        }
    }
}

//      MIXIN:
//      Font Color
//
//      HOW IT WORKS:
//      Using a mixin guard we check to see if the color is white. When it is
//      white, we fadeout the link color. When it isn't white, we darken
//      the font color instead.
//  ----------------------------------------------------------------------------
.btn-fc(@fc) {
    color: @fc;

    &.s-btn__dropdown:after {
        border-color: currentColor transparent;
    }

    & when (@fc = #FFFFFF) and (alpha(@fc) = 1) {
        &:hover,
        &:active,
        &:focus,
        &.is-selected {
            color: @fc;

            &.s-btn__dropdown:after {
                border-color: currentColor transparent;
            }
        }
    }

    & when not (@fc = #FFFFFF) and (alpha(@fc) = 1)  {
        &:hover,
        &:active {
            color: darken(@fc,10%);
        }
        &:focus,
        &.is-selected {
            color: darken(@fc,20%);
        }
    }

    & when (alpha(@fc) < 1) {
        &:hover,
        &:active {
            color: fade(lighten(@fc,10%),90%);
        }
        &:focus,
        &.is-selected {
            color: fade(lighten(@fc,10%),100%);
        }
    }

    &[disabled] {
        color: fade(desaturate(@fc,90%),80%);
    }
}


//  ============================================================================
//  $   BASE STYLE
//  ----------------------------------------------------------------------------
.s-btn {
    position: relative;
    padding: 0.8em 1em;
    border: 1px solid transparent;
    border-radius: @btn-br;
    outline: none;
    background-color: transparent;
    font-family: inherit;
    font-size: inherit;
    font-weight: @btn-fw;
    text-decoration: none;
    line-height: 1; // Normalizes text display between a.s-button and button.s-button
    cursor: pointer;

    //  Default Style (Clear)
    .btn-check-brc();
    .btn-check-bxs(fade(@btn-bxos,0%), @status: false);
    .btn-bgc(@btn-bgc);
    .btn-check-bgg(transparent);
    .btn-fc(@btn-fc);

    &:hover,
    &:focus {
        text-decoration: none;
    }

    &:focus {
        outline: none;
    }

    &[disabled] {
        opacity: 1;
        pointer-events: none;
        cursor: default;
    }

    &.s-btn__dropdown {
        padding-right: 2.35em;

        &:after {
            content: "";
            position: absolute;
            top: calc(~"50% - 2px");
            right: 1em;
            z-index: @zi-active;
            border-style: solid;
            border-width: @su4;
            border-top-width: @su4;
            border-bottom-width: 0;
            pointer-events: none;
        }
    }

    &.s-btn__xs {
        padding: 0.5em 0.6em;
        font-size: @fs-fine;

        &.s-btn__dropdown {
            padding-right: 1.5em;

            &:after {
                top: calc(~"50% - 2px");
                right: 0.6em;
                border-width: @su4 - 1px;
                border-top-width: @su4 - 1px;
                border-bottom-width: 0;
            }
        }
    }

    &.s-btn__sm {
        padding: 0.6em 0.8em;
        font-size: @fs-caption;

        &.s-btn__dropdown {
            padding-right: 2.05em;

            &:after {
                right: 0.8em;
            }
        }
    }

    &.s-btn__md {
        border-radius: @btn-br + 1;
        font-size: @fs-body3;

        &.s-btn__dropdown {
            padding-right: 2.1em;

            &:after {
                top: calc(~"50% - 2px");
                border-width: @su4 + 1px;
                border-top-width: @su4 + 1px;
                border-bottom-width: 0;
            }
        }
    }

    &.s-btn__lg {
        border-radius: @btn-br + 1;
        font-size: @fs-title;

        &.s-btn__dropdown {
            padding-right: 2.15em;

            &:after {
                top: calc(~"50% - 2px");
                border-width: @su4 + @su2;
                border-top-width: @su4 + @su2;
                border-bottom-width: 0;
            }
        }
    }

    &.s-btn__xl {
        border-radius: @btn-br + @br-sm;
        font-size: @fs-headline1;

        &.s-btn__dropdown {
            padding-right: 2em;

            &:after {
                top: calc(~"50% - 4px");
                border-width: @su4 + 3px;
                border-top-width: @su4 + 3px;
                border-bottom-width: 0;
            }
        }
    }

    //  -- BUTTONS WITH ICONS
    //  ------------------------------------------------------------------------
    //  [1] Most svg icons are 18px tall, but the button's line-height is 1 (13px).
    //      This means we need to off set the margin y-axis so we don't add
    //      additional height to the button.
    //
    //  [2] When you place an icon in a button, the button must have the `.grid`
    //      class. We add this so we can invoke `.ai-center`. This centers the
    //      copy with the icon. Then we apply a right margin for gutter spacing.
    //
    //  [3] When an icon is placed in a button, it creates trapped whitespace
    //      to the left of the icon. This is a result of the button padding.
    //      Again we offset this with a negative left margin to eliminate this
    //      trapped whitespace.
    //  ------------------------------------------------------------------------
    .svg-icon {
        margin-top: -(@su2 + 1);    // [1]
        margin-right: @su2;         // [2]
        margin-bottom: -(@su2);     // [1]
        margin-left: -(@su4);       // [3]
        /* autoprefixer: off */
        transition: opacity 200ms @te-smooth; // Animate the transition to .is-loading
    }
}


//  ============================================================================
//  $   DEFAULT (SECONDARY) STYLES
//  ============================================================================
//  --  Base Inverted Style
//      Inverts the button colors so they can be used on a dark background.
//  ----------------------------------------------------------------------------
.s-btn__inverted {
    .btn-check-brc(@status: false);
    .btn-check-bxs(@bxos: fade(@btn-bxos,0%), @status: false);
    .btn-bgc(fade(@btn-primary-fc,0%));
    .btn-fc(fade(lighten(@btn-primary-bgc,40%),90%));
}

//  --  Base Outline Style
//      Style which applies only a border.
//  ----------------------------------------------------------------------------
.s-btn__outlined {
    .btn-check-brc(lighten(@btn-fc,20%));
    .btn-check-bxs(@bxos: @btn-bxos, @status: false);
    .btn-check-bgg(transparent);
    .btn-bgc(fade(@btn-fc,0%));
    .btn-fc(@btn-fc);

    //  --  Inverted: Outlined
    &.s-btn__inverted {
        .btn-check-brc(fade(lighten(@btn-primary-bgc,50%),25%));
        .btn-check-bxs(@bxos: @white, @status: false);
        .btn-bgc(fade(lighten(@btn-primary-bgc,20%),0%));
        .btn-check-bgg(transparent);
        .btn-fc(fade(lighten(@btn-primary-bgc,40%),90%));
    }
}

//  --  Muted Clear Style
//      Creates a gray button style.
//  ----------------------------------------------------------------------------
.s-btn__muted {
    .btn-check-brc(@status: false);
    .btn-check-bxs(@bxos: @black-350, @status: false);
    .btn-bgc(fade(@black-200,0%));
    .btn-fc(@black-500);

    //  --  Muted (Gray)
    &.s-btn__outlined {
        .btn-check-brc(@black-150);
        .btn-check-bxs(@bxos: @black-350, @status: false);
        .btn-bgc(fade(@black-200,0%));
        .btn-fc(@black-500);
    }

    //  --  Filled (Gray)
    &.s-btn__filled {
        .btn-check-brc(@black-150);
        .btn-check-bxs(@black-200, @bxos: @black-800);
        .btn-bgc(@black-100);
        .btn-fc(@black-700);
    }
}

//  --  Base Filled Style
//      Adds in background-colors, background-images, and/or box-shadows.
//  ----------------------------------------------------------------------------
.s-btn__filled {
    .btn-check-brc(darken(@btn-filled-bgc,20%));
    .btn-check-bxs(@btn-filled-bgc);
    .btn-bgc(@btn-filled-bgc);
    .btn-check-bgg(@btn-filled-bgc);
    .btn-fc(@btn-filled-fc);

    &.s-btn__inverted {
        .btn-check-brc(transparent);
        .btn-check-bxs(@bxos: lighten(@btn-bxos,40%), @status: false);
        .btn-bgc(fade(@white,95%));
        .btn-fc(@btn-fc);
    }
}


//  ============================================================================
//  $   WARNING BUTTONS & STYLES
//  ============================================================================
.s-btn__warning {
    .btn-check-brc(@status: false);
    .btn-check-bxs(@bxos: @btn-warning-bgc, @status: false);
    .btn-bgc(fade(@btn-warning-bgc,0%));
    .btn-fc(@btn-warning-bgc);

    //  --  Outlined
    &.s-btn__outlined {
        .btn-check-brc(lighten(@btn-warning-bgc,20%));
        .btn-check-bxs(@bxos: @btn-warning-bgc, @status: false);
        .btn-bgc(fade(@btn-warning-bgc,0%));
        .btn-fc(@btn-warning-bgc);
    }

    //  --  Filled
    &.s-btn__filled {
        .btn-check-brc(@btn-warning-bgc);
        .btn-check-bxs(@btn-warning-bgc, @btn-warning-bgc);
        .btn-bgc(@btn-warning-bgc);
        .btn-check-bgg(@btn-warning-bgc);
        .btn-fc(@btn-warning-fc);
    }

    //  --  Inverted
    &.s-btn__inverted {
        //  --  Inverted: Clear
        .btn-check-brc(@status: false);
        .btn-check-bxs(@bxos: fade(@btn-bxos,0%), @status: false);
        .btn-bgc(fade(@btn-warning-fc,0%));
        .btn-fc(fade(lighten(@btn-warning-bgc,40%),90%));

        //  --  Inverted: Outlined
        &.s-btn__outlined {
            .btn-check-brc(fade(lighten(@btn-warning-bgc,50%),25%));
            .btn-bgc(fade(lighten(@btn-warning-bgc,40%),0%));
            .btn-fc(fade(lighten(@btn-warning-bgc,50%),80%));
        }

        //  --  Inverted: Filled
        &.s-btn__filled {
            .btn-check-brc(mix(lighten(@btn-warning-bgc,30%),@white));
            .btn-check-bxs(@bxos: lighten(@btn-warning-bgc,50%), @status: false);
            .btn-bgc(mix(lighten(@btn-warning-bgc,30%),@white));
            .btn-check-bgg(lighten(@btn-warning-bgc,30%));
            .btn-fc(darken(@btn-warning-bgc,10%));
        }
    }
}


//  ============================================================================
//  $   CONFIRM BUTTONS & STYLES
//  ============================================================================
.s-btn__confirm {
    .btn-check-brc(@status: false);
    .btn-check-bxs(@bxos:@btn-confirm-bgc, @status: false);
    .btn-bgc(fade(@btn-confirm-bgc,0%));
    .btn-fc(@btn-confirm-bgc);

    //  -- Outlined
    &.s-btn__outlined {
        .btn-check-brc(lighten(@btn-confirm-bgc,20%));
        .btn-check-bxs(@bxos: @btn-confirm-bgc, @status: false);
        .btn-bgc(fade(@btn-confirm-bgc,0%));
        .btn-fc(@btn-confirm-bgc);
    }

    //  -- Filled
    &.s-btn__filled {
        .btn-check-brc(@btn-confirm-bgc);
        .btn-check-bxs(@btn-confirm-bgc, @btn-confirm-bgc);
        .btn-bgc(@btn-confirm-bgc);
        .btn-check-bgg(@btn-confirm-bgc);
        .btn-fc(@btn-confirm-fc);
    }

    //  -- Inverted
    &.s-btn__inverted {
        //  --  Inverted: Clear
        .btn-check-brc(@status: false);
        .btn-check-bxs(@bxos: fade(@btn-bxos,0%), @status: false);
        .btn-bgc(fade(@btn-confirm-fc,0%));
        .btn-fc(fade(lighten(@btn-confirm-bgc,40%),90%));

        //  --  Inverted: Outlined
        &.s-btn__outlined {
            .btn-check-brc(fade(lighten(@btn-confirm-bgc,50%),25%));
            .btn-bgc(fade(@btn-confirm-bgc,0%));
            .btn-fc(fade(lighten(@btn-confirm-bgc,50%),80%));
        }

        //  --  Inverted: Filled
        &.s-btn__filled {
            .btn-check-brc(transparent);
            .btn-check-bxs(@bxos: lighten(@btn-confirm-bgc,50%), @status: false);
            .btn-bgc(mix(lighten(@btn-confirm-bgc,15%),@white));
            .btn-check-bgg(lighten(@btn-confirm-bgc,25%));
            .btn-fc(darken(@btn-confirm-bgc,30%));
        }
    }
}


//  ============================================================================
//  $   PRIMARY STYLE
//  ============================================================================
.s-btn__primary {
    .btn-check-brc(@btn-primary-bgc);
    .btn-check-bxs(@btn-primary-bgc);
    .btn-bgc(@btn-primary-bgc);
    .btn-check-bgg(@btn-primary-bgc);
    .btn-fc(@btn-primary-fc);
}



//  $$  Loading Icon
//      Adds a loading icon into the button
//  ----------------------------------------------------------------------------
//  --  First the keyframes
@-webkit-keyframes spinnerRotate {
    from {
        -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
    }
    to {
        -webkit-transform: rotate(359deg);
                transform: rotate(359deg);
    }
}
@keyframes spinnerRotate {
    from {
        -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
    }
    to {
        -webkit-transform: rotate(359deg);
                transform: rotate(359deg);
    }
}

//  --  Next the actual loading spinner
.s-btn {
    &.is-loading {
        padding-left: @su24 + @su8;

        &:before {
            content: "";
            position: absolute;
            top: calc(~"50% - @{su8}");
            width: @su16;
            height: @su16;
            margin-left: -(@su24 - @su2);
            border: 2px dotted fade(@btn-filled-fc,40%);
            border-left-color: darken(@btn-filled-fc,5%);
            border-radius: @br-circle;
            -webkit-animation: spinnerRotate 800ms infinite linear;
                    animation: spinnerRotate 800ms infinite linear;
        }

        .svg-icon:first-child {
            margin-left: -23px;
            // If the first thing in the button is an icon, let's hide it on loading
            // We only want to modify the visibility, since we still want it to have shape and keep the same layout.
            opacity: 0;
        }
    }

    &.s-btn__primary.is-loading:before,
    &.s-btn__warning.s-btn__filled.is-loading:before,
    &.s-btn__confirm.s-btn__filled.is-loading:before {
        border-color: fade(@white,25%);
        border-left-color: @white;
    }

    &.s-btn__warning:not(.s-btn__filled).is-loading:before {
        border-color: fade(@btn-warning-bgc,25%);
        border-left-color: fade(@btn-warning-bgc,75%);
    }
    &.s-btn__confirm:not(.s-btn__filled).is-loading:before {
        border-color: fade(@btn-confirm-bgc,40%);
        border-left-color: fade(@btn-confirm-bgc,100%);
    }
}

}
